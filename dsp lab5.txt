QUESTION 1



% Define parameters
alpha = 1+mod(259,3);% Alpha value
duration = 10;        % Duration of the signal in seconds
sampling_rate = 100;  % Sampling rate in samples per second

% Time vector
t = linspace(0, duration, duration * sampling_rate);

% Define the chirp signal
F_start = 2 + 2 * alpha;
F_end = 5 + 5 * alpha;
F_t = linspace(F_start, F_end, duration * sampling_rate);
x_t = sin(2 * pi * cumsum(F_t) / sampling_rate);

% Plot the chirp signal
figure;
plot(t, x_t);
title('Chirp Signal x(t)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Calculate the FFT of the chirp signal
N = length(x_t); % Number of samples
X_f = fft(x_t);
X_f = fftshift(X_f); % Shift zero frequency component to the center

% Frequency axis for plotting
f = linspace(-sampling_rate / 2, sampling_rate / 2, N);

% Plot the frequency spectrum
figure;
plot(f, abs(X_f) / N);
title('Frequency Spectrum of Chirp Signal');
xlabel('Frequency (Hz)');
ylabel('Amplitude');
grid on;

% Identify the frequency components
[max_amp, max_idx] = max(abs(X_f));
dominant_frequency = f(max_idx);
fprintf('Dominant Frequency Component: %.2f Hz\n', dominant_frequency);
% Define parameters for spectrogram
window_length = 100;  % Hamming window length in samples
overlap = 10;         % Overlap in samples

% Calculate the spectrogram
figure;
spectrogram(x_t, hamming(window_length), overlap, window_length, sampling_rate, 'yaxis');
title('Spectrogram of Chirp Signal');
xlabel('Time (s)');
ylabel('Frequency (Hz)');
Dominant Frequency Component: -14.16 Hz.










QUESTION 2
% Load the audio file
audio_file = 'instru2.wav';
[y, fs] = audioread(audio_file);

% Plot the spectrogram
figure;
spectrogram(y, hamming(512), 256, 512, fs, 'yaxis');
title('Spectrogram of Audio Signal');
xlabel('Time (s)');
ylabel('Frequency (Hz)');

% Analyze the fundamental pitch from the spectrogram
% You can visually identify the fundamental frequency from the plot.

% Plot the conventional spectrum
figure;
N = length(y);
frequencies = linspace(0, fs, N);
spectrum = abs(fft(y));
spectrum = spectrum(1:N/2+1); % Take the positive half of the spectrum
plot(frequencies(1:N/2+1), 20*log10(spectrum));
title('Conventional Spectrum of Audio Signal');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');

% Analyze the fundamental pitch from the spectrum
% You can locate the peak frequency to determine the fundamental pitch.

% Discuss the findings in your report.

% Note: Adjust the parameters (e.g., window size, overlap) as needed for your specific analysis.



% Load the audio file
audio_file = 'opera.wav';
[y, fs] = audioread(audio_file);

% Plot the spectrogram
figure;
spectrogram(y, hamming(512), 256, 512, fs, 'yaxis');
title('Spectrogram of "opera.wav"');
xlabel('Time (s)');
ylabel('Frequency (Hz)');

% Comment on the variations in fundamental pitch observed from the spectrogram.

% Note: Adjust the parameters (e.g., window size, overlap) as needed for your analysis.





QUESTION 3





% Specify the audio recording parameters
fs = 4000; % Sampling rate (in Hz)
duration = 5; % Duration of the recording (in seconds)

% Create an audio recorder object
recObj = audiorecorder(fs, 16, 1); % 16-bit, mono

% Start recording
disp('Start speaking...');
recordblocking(recObj, duration);
disp('End of recording.');

% Store the recorded audio data
audioData = getaudiodata(recObj);

% Save the recorded audio as a .wav file
filename = 'sujal.wav';
audiowrite(filename, audioData, fs);

% Display a message indicating the file has been saved
disp(['Audio saved as ' filename]);



% Load the recorded audio with the lower sampling rate
audio_file = 'sujal.wav';
[y, fs] = audioread(audio_file);

% Plot the spectrogram
figure;
spectrogram(y, hamming(512), 256, 512, fs, 'yaxis');
title('Spectrogram of Recorded Name');
xlabel('Time (s)');
ylabel('Frequency (Hz)');
